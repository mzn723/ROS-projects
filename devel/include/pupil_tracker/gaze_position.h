// Generated by gencpp from file pupil_tracker/gaze_position.msg
// DO NOT EDIT!


#ifndef PUPIL_TRACKER_MESSAGE_GAZE_POSITION_H
#define PUPIL_TRACKER_MESSAGE_GAZE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pupil_tracker
{
template <class ContainerAllocator>
struct gaze_position_
{
  typedef gaze_position_<ContainerAllocator> Type;

  gaze_position_()
    : x(0.0)
    , y(0.0)
    , conf(0.0)
    , rx(0.0)
    , ry(0.0)  {
    }
  gaze_position_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , conf(0.0)
    , rx(0.0)
    , ry(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _conf_type;
  _conf_type conf;

   typedef float _rx_type;
  _rx_type rx;

   typedef float _ry_type;
  _ry_type ry;




  typedef boost::shared_ptr< ::pupil_tracker::gaze_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pupil_tracker::gaze_position_<ContainerAllocator> const> ConstPtr;

}; // struct gaze_position_

typedef ::pupil_tracker::gaze_position_<std::allocator<void> > gaze_position;

typedef boost::shared_ptr< ::pupil_tracker::gaze_position > gaze_positionPtr;
typedef boost::shared_ptr< ::pupil_tracker::gaze_position const> gaze_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pupil_tracker::gaze_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pupil_tracker::gaze_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pupil_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'pupil_tracker': ['/home/rics/workspace/src/pupil_tracker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pupil_tracker::gaze_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pupil_tracker::gaze_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pupil_tracker::gaze_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pupil_tracker::gaze_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pupil_tracker::gaze_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pupil_tracker::gaze_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pupil_tracker::gaze_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e2f0ee6f3651fb6dedeca8dcf0988cb";
  }

  static const char* value(const ::pupil_tracker::gaze_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e2f0ee6f3651fb6ULL;
  static const uint64_t static_value2 = 0xdedeca8dcf0988cbULL;
};

template<class ContainerAllocator>
struct DataType< ::pupil_tracker::gaze_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pupil_tracker/gaze_position";
  }

  static const char* value(const ::pupil_tracker::gaze_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pupil_tracker::gaze_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n\
float32 y\n\
float32 conf\n\
float32 rx\n\
float32 ry\n\
";
  }

  static const char* value(const ::pupil_tracker::gaze_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pupil_tracker::gaze_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.conf);
      stream.next(m.rx);
      stream.next(m.ry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gaze_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pupil_tracker::gaze_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pupil_tracker::gaze_position_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "rx: ";
    Printer<float>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<float>::stream(s, indent + "  ", v.ry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUPIL_TRACKER_MESSAGE_GAZE_POSITION_H
