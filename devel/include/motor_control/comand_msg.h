// Generated by gencpp from file motor_control/comand_msg.msg
// DO NOT EDIT!


#ifndef MOTOR_CONTROL_MESSAGE_COMAND_MSG_H
#define MOTOR_CONTROL_MESSAGE_COMAND_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_control
{
template <class ContainerAllocator>
struct comand_msg_
{
  typedef comand_msg_<ContainerAllocator> Type;

  comand_msg_()
    : motor(0)
    , position(0)
    , direction(false)  {
    }
  comand_msg_(const ContainerAllocator& _alloc)
    : motor(0)
    , position(0)
    , direction(false)  {
  (void)_alloc;
    }



   typedef uint8_t _motor_type;
  _motor_type motor;

   typedef uint32_t _position_type;
  _position_type position;

   typedef uint8_t _direction_type;
  _direction_type direction;




  typedef boost::shared_ptr< ::motor_control::comand_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_control::comand_msg_<ContainerAllocator> const> ConstPtr;

}; // struct comand_msg_

typedef ::motor_control::comand_msg_<std::allocator<void> > comand_msg;

typedef boost::shared_ptr< ::motor_control::comand_msg > comand_msgPtr;
typedef boost::shared_ptr< ::motor_control::comand_msg const> comand_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_control::comand_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_control::comand_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_control': ['/home/rics/workspace/src/motor_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_control::comand_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_control::comand_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_control::comand_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_control::comand_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_control::comand_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_control::comand_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_control::comand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0046743715cfd63f29b50134bc02d4f";
  }

  static const char* value(const ::motor_control::comand_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0046743715cfd63ULL;
  static const uint64_t static_value2 = 0xf29b50134bc02d4fULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_control::comand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_control/comand_msg";
  }

  static const char* value(const ::motor_control::comand_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_control::comand_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 motor\n\
uint32 position\n\
bool direction\n\
";
  }

  static const char* value(const ::motor_control::comand_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_control::comand_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor);
      stream.next(m.position);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct comand_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_control::comand_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_control::comand_msg_<ContainerAllocator>& v)
  {
    s << indent << "motor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor);
    s << indent << "position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_CONTROL_MESSAGE_COMAND_MSG_H
